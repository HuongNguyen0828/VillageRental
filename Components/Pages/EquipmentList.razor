@page "/equipmentList"

@using VillageRental.Data
@using VillageRental.Services
@inject NavigationManager navigationMangager

<br />
<h3 >Equipment List</h3><br /> <br />

<div> <strong>Total</strong>: @equipmentList.Count()</div>

@if (equipmentList == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<button class="btn btn-primary" @onclick="AddNewEquipment">Add New</button><br><br />
	<table class="table table-striped">
		<thead>
			<tr style="text-align: center">
				<th>Id</th>
				<th>Name</th>
				<th>Category</th>
				<th>Quantity</th>
				<th>Description</th>
				<th>Daily Price</th>
				<th colspan="4">Action</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var equipment in equipmentList)
			{
				<tr style="text-align: center">
					<td>@equipment.Id</td>
					<td>@equipment.Name</td>
					<td>@equipment.CategoryStr</td>
					<td>@equipment.Quantity</td>
					<td>@equipment.Description</td>
					<td>@equipment.DailyPrice</td>

					<td style="display:flex; gap: 1rem">
						<button class="btn-sm btn-info" @onclick=@(() => UpdateEquipment(equipment))>Edit</button>
						<button class="btn-sm btn-danger" @onclick=@(() => DeleteEquipment(equipment))>Delete</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}


@code {
	public List<EquipmentwithCategoryStr> equipmentList = new();
	DatabaseService databaseService = new();

	//Error was here
	protected override async Task OnInitializedAsync()
	{
		equipmentList = await databaseService.GetAllEquipment();
	}

	public void AddNewEquipment()
	{
		navigationMangager.NavigateTo("addEquipment");
	}

	public void UpdateEquipment(EquipmentwithCategoryStr equipmentWithCategoryStr)
	{
		// Transition from equipmentWithStr to equipment: just got the id

		navigationMangager.NavigateTo($"updateEquipment/{equipmentWithCategoryStr.Id}");
	}
	public async Task DeleteEquipment(EquipmentwithCategoryStr equipmentWithCategorySt)
	{
		Equipment equipment = await databaseService.GetEquipment(equipmentWithCategorySt.Id);
		// Display confirmation alert
		bool answer = await App.Current.MainPage.DisplayAlert("Confirm", $"Are you sure you want to Delete Equipment {equipment.Name}", "OK", "Cancel");
		if (answer) // Ok meaning true
		{
			try
			{
				// Call service to delete
				await databaseService.DeleteEquipment(equipment.Id);

				await App.Current.MainPage.DisplayAlert("Success", $"Delete {equipment.Name} Success", "OK");

				// Update state
				equipmentList = await databaseService.GetAllEquipment();
				this.StateHasChanged(); //Update state
			}
			catch (Exception ex)
			{
				await App.Current.MainPage.DisplayAlert("Opps", $"Cannot delete Equipment {equipment.Name} which is assoiciated with a rental", "OK");

			}

		}
		else // else canceled
		{
			await App.Current.MainPage.DisplayAlert("Canceled", $"Delete Equipment {equipment.Name} Canceled", "OK");
		}

	}

}

